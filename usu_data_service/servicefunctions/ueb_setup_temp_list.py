ueb_input_template_list = ['import os', 'from datetime import datetime', 'from hydrogate import HydroDS', 'import getpass', '', '# User input for a specific watershed ########################################', '# authentication and clear old user data files', "username = input('Enter your HydroDS user name: ')", "password = getpass.getpass('Enter your HydroDS password: ')", 'HDS = HydroDS(username=username, password=password)', '', '# Grid cell projection', 'epsgCode =', '', '# Grid cell sizes (m) for grid reprojection', 'dx =', 'dy =', '', '# outlet point for watershed delineation (optional)', 'lat_outlet =', 'lon_outlet =', '', '# spatial bounding box for watershed delineation', 'leftX =', 'topY =', 'rightX =', 'bottomY =', '', '# stream threshold for watershed delineation', 'streamThreshold =', '', '# watershed name', 'watershedName =', '', '# Cell spacing for subsampled UEB model (m)', 'dxRes =', 'dyRes =', '', '# model input start and end date', 'startDateTime =', 'endDateTime =', '', '# site initial conditions', '# Energy content initial condition (kg m-3)', 'usic =', '# Snow water equivalent initial condition (m)', 'wsic =', '# Canopy Snow Water Equivalent (m) relative to T = 0', 'tic =', '# Dimensionless age of snow surface', 'wcic =', '# Snow surface temperature one day prior to the model starting time', 'ts_last =', '', '# download directory for all input files created from HydroDS', "download_dir = os.path.join(os.getcwd(), 'ueb_input_files.zip')", '', '', '# Code to prepare the input  ###########################', '## Subset DEM and Delineate Watershed', "input_static_DEM = 'nedWesternUS.tif'", 'subsetDEM_request = HDS.subset_raster(input_raster=input_static_DEM,', '                                      left=leftX, top=topY, right=rightX, bottom=bottomY,', "                                      output_raster=watershedName + 'DEM84.tif')", '', "myWatershedDEM = watershedName + 'Proj' + str(dx) + '.tif'", "WatershedDEM = HDS.project_resample_raster(input_raster_url_path=subsetDEM_request['output_raster'],", '                                           cell_size_dx=dx, cell_size_dy=dy, epsg_code=epsgCode,', "                                           output_raster=myWatershedDEM,resample='near')", '', 'if lon_outlet is not None and lat_outlet is not None:', '    outlet_shapefile_result = HDS.create_outlet_shapefile(point_x=lon_outlet, point_y=lat_outlet,', "                                                          output_shape_file_name=watershedName+'Outlet.shp')", "    project_shapefile_result = HDS.project_shapefile(outlet_shapefile_result['output_shape_file_name'],", "                                                     watershedName + 'OutletProj.shp',", '                                                     epsg_code=epsgCode)', "    Watershed_hires = HDS.delineate_watershed(WatershedDEM['output_raster'],", "                        input_outlet_shapefile_url_path=project_shapefile_result['output_shape_file'],", '                        threshold=streamThreshold, epsg_code=epsgCode,', "                        output_raster=watershedName + str(dx) + 'WS.tif',", "                        output_outlet_shapefile=watershedName + 'movOutlet.shp')", "    watershed_output = Watershed_hires['output_raster']", 'else:', "    Watershed_hires = HDS.raster_calculator(input_raster=WatershedDEM['output_raster'],", "                      function='(A<0.0)*-1+1', outputfile=watershedName + str(dx) + 'WS.tif',", "                      NoDataValue=0, type='Int32')", "    watershed_output = Watershed_hires['outputfile']", '', '# Resample watershed grid to coarser grid if dxRes != dx or dyRes != dy', 'if dxRes == dx and dyRes == dy:', '    Watershed_raster = watershed_output', 'else:', '    Watershed = HDS.resample_raster(input_raster_url_path=watershed_output,', '                                    cell_size_dx=dxRes, cell_size_dy=dyRes,', "                                    resample='near', output_raster=watershedName + str(dxRes) + 'WS.tif')", "    Watershed_raster = Watershed['output_raster']", '', '# Convert raster to netCDF for UEB input', "Watershed_temp = HDS.raster_to_netcdf(Watershed_raster, output_netcdf='watershed'+str(dxRes)+'.nc')", '', '# In the netCDF file rename the generic variable "Band1" to "watershed"', "Watershed_NC = HDS.netcdf_rename_variable(input_netcdf_url_path=Watershed_temp['output_netcdf'],", "                                          output_netcdf='watershed.nc', input_variable_name='Band1',", "                                          output_variable_name='watershed')", '', '', '## terrain variables', '# aspect', "aspect_hires = HDS.create_raster_aspect(input_raster_url_path=WatershedDEM['output_raster'],", "                                        output_raster=watershedName + 'Aspect' + str(dx)+ '.tif')", '', 'if dxRes == dx and dyRes == dy:', "    aspect_output = aspect_hires['output_raster']", 'else:', "    aspect = HDS.resample_raster(input_raster_url_path=aspect_hires['output_raster'],", '                                 cell_size_dx=dxRes,', '                                 cell_size_dy=dyRes,', "                                 resample='near',", "                                 output_raster=watershedName + 'Aspect' + str(dxRes) + '.tif')", "    aspect_output = aspect['output_raster']", '', 'aspect_temp = HDS.raster_to_netcdf(input_raster_url_path=aspect_output,', "                                   output_netcdf='aspect'+str(dxRes)+'.nc')", '', "aspect_nc = HDS.netcdf_rename_variable(input_netcdf_url_path=aspect_temp['output_netcdf'],", "                                       output_netcdf='aspect.nc',", "                                       input_variable_name='Band1',", "                                       output_variable_name='aspect')", '# slope', "slope_hires = HDS.create_raster_slope(input_raster_url_path=WatershedDEM['output_raster'],", "                                      output_raster=watershedName + 'Slope' + str(dx) + '.tif')", 'if dxRes == dx and dyRes == dy:', "    slope_output = slope_hires['output_raster']", 'else:', "    slope = HDS.resample_raster(input_raster_url_path = slope_hires['output_raster'], cell_size_dx=dxRes,", "                                cell_size_dy=dyRes, resample='near',", "                                output_raster=watershedName + 'Slope' + str(dxRes) + '.tif')", "    slope_output = slope['output_raster']", '', "slope_temp = HDS.raster_to_netcdf(input_raster_url_path=slope_output, output_netcdf='slope'+str(dxRes)+'.nc')", '', "slope_nc = HDS.netcdf_rename_variable(input_netcdf_url_path=slope_temp['output_netcdf'],", "                                      output_netcdf='slope.nc', input_variable_name='Band1',", "                                      output_variable_name='slope')", '', '', '## Land cover variables', "nlcd_raster_resource = 'nlcd2011CONUS.tif'", 'subset_NLCD_result = HDS.project_clip_raster(input_raster=nlcd_raster_resource,', '                                             ref_raster_url_path=Watershed_raster,', "                                             output_raster=watershedName + 'nlcdProj' + str(dxRes) + '.tif')", '# cc', "nlcd_variable_result = HDS.get_canopy_variable(input_NLCD_raster_url_path=subset_NLCD_result['output_raster'],", "                                               variable_name='cc', output_netcdf=watershedName+str(dxRes)+'cc.nc')", "cc_nc = HDS.netcdf_rename_variable(input_netcdf_url_path=nlcd_variable_result['output_netcdf'],", "                                   output_netcdf='cc.nc', input_variable_name='Band1', output_variable_name='cc')", '# hcan', "nlcd_variable_result = HDS.get_canopy_variable(input_NLCD_raster_url_path=subset_NLCD_result['output_raster'],", "                                               variable_name='hcan', output_netcdf=watershedName+str(dxRes)+'hcan.nc')", "hcan_nc = HDS.netcdf_rename_variable(input_netcdf_url_path=nlcd_variable_result['output_netcdf'],", "                                     output_netcdf='hcan.nc', input_variable_name='Band1',output_variable_name='hcan')", '# lai', "nlcd_variable_result = HDS.get_canopy_variable(input_NLCD_raster_url_path=subset_NLCD_result['output_raster'],", "                                               variable_name='lai', output_netcdf=watershedName+str(dxRes)+'lai.nc')", "lai_nc = HDS.netcdf_rename_variable(input_netcdf_url_path=nlcd_variable_result['output_netcdf'],", "                                    output_netcdf='lai.nc', input_variable_name='Band1',output_variable_name='lai')", '', '', '## climate variables', 'startYear = datetime.strptime(startDateTime,"%Y/%m/%d %H").year', 'endYear = datetime.strptime(endDateTime,"%Y/%m/%d %H").year', 'startDate = datetime.strptime(startDateTime, "%Y/%m/%d %H").date().strftime(\'%m/%d/%Y\')', 'endDate = datetime.strptime(endDateTime, "%Y/%m/%d %H").date().strftime(\'%m/%d/%Y\')', '', "climate_Vars = ['vp', 'tmin', 'tmax', 'srad', 'prcp']", '# iterate through climate variables', 'for var in climate_Vars:', '    for year in range(startYear, endYear+1):', '        climatestaticFile1 = var + "_" + str(year) + ".nc4"', '        climateFile1 = watershedName + \'_\' + var + "_" + str(year) + ".nc"', '        Year1sub_request = HDS.subset_netcdf(input_netcdf=climatestaticFile1,', '                                             ref_raster_url_path=Watershed_raster,', '                                             output_netcdf=climateFile1)', '        concatFile = "conc_"+climateFile1', '        if year == startYear:', "            concatFile1_url = Year1sub_request['output_netcdf']", '        else:', "            concatFile2_url = Year1sub_request['output_netcdf']", '            concateNC_request = HDS.concatenate_netcdf(input_netcdf1_url_path=concatFile1_url,', '                                                       input_netcdf2_url_path=concatFile2_url,', '                                                       output_netcdf=concatFile,', "                                                       inout_timeName='time')", "            concatFile1_url = concateNC_request['output_netcdf']", '', '    timesubFile = "tSub_" + climateFile1', '    subset_NC_by_time_result = HDS.subset_netcdf_by_time(input_netcdf_url_path=concatFile1_url,', "                                                         time_dimension_name='time',", '                                                         start_date=startDate,', '                                                         end_date=endDate,', '                                                         output_netcdf=timesubFile)', "    subset_NC_by_time_file_url = subset_NC_by_time_result['output_netcdf']", "    if var == 'prcp':", '        proj_resample_file = var + "_0.nc"', '    else:', '        proj_resample_file = var + "0.nc"', '    ncProj_resample_result = HDS.project_subset_resample_netcdf(input_netcdf_url_path=subset_NC_by_time_file_url,', "                                                                ref_netcdf_url_path=Watershed_NC['output_netcdf'],", '                                                                variable_name=var, output_netcdf=proj_resample_file)', "    ncProj_resample_file_url = ncProj_resample_result['output_netcdf']", '', '    # Do unit conversion for precipitation (mm/day --> m/hr)', "    if var == 'prcp':", '        proj_resample_file = var + "0.nc"', '        ncProj_resample_result = HDS.convert_netcdf_units(input_netcdf_url_path=ncProj_resample_file_url,', '                                                          output_netcdf=proj_resample_file,', "                                                          variable_name=var, variable_new_units='m/hr',", '                                                          multiplier_factor=0.00004167, offset=0.0)', "        ncProj_resample_file_url = ncProj_resample_result['output_netcdf']", '', '', '# create the model parameter files', "parameter_files_dict = HDS.create_ueb_parameter_files(output_control='control.dat',", "                                                      output_inputcontrol='inputcontrol.dat',", "                                                      output_outputcontrol='outputcontrol.dat',", "                                                      output_siteinitial='siteinitial.dat',", "                                                      output_param='param.dat',", '                                                      startDateTime=startDateTime,', '                                                      endDateTime=endDateTime,', '                                                      topY=topY, bottomY=bottomY, rightX=rightX, leftX=leftX,', '                                                      usic=usic, wsic=wsic, tic=tic, wcic=wcic, ts_last=ts_last)', '', '## download ueb input package to local PC', "ueb_inputPackage_dict = ['watershed.nc', 'aspect.nc', 'slope.nc', 'cc.nc', 'hcan.nc', 'lai.nc',", "                         'vp0.nc', 'srad0.nc', 'tmin0.nc', 'tmax0.nc', 'prcp0.nc','control.dat',", "                         'inputcontrol.dat', 'outputcontrol.dat', 'siteinitial.dat', 'param.dat']", "zip_files_result = HDS.zip_files(files_to_zip=ueb_inputPackage_dict, zip_file_name=watershedName+str(dxRes)+'.zip')", '', "HDS.download_file(file_url_path=zip_files_result['zip_file_name'], save_as=download_dir)", 'print(zip_files_result)', "print('Finished UEB input setup, input package downloaded at {0}'.format(download_dir))"]
